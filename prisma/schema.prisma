// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id     Int    @id @default(autoincrement())
  nome   String @db.VarChar(30)
  bolos  Bolo[]
  @@map("categorias")
}

model Bolo {
  id          Int       @id @default(autoincrement())
  nome        String    @db.VarChar(50)
  descricao   String    @db.VarChar(255)
  foto        String
  preco       Decimal   @db.Decimal(10, 2)
  peso        Decimal   @db.Decimal(6, 3)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  destaque    Boolean   @default(true)
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId Int
  pedidos     Pedido[]
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?   @db.VarChar(36)
  ativo       Boolean   @default(true)
  @@map("bolos")
}

model Cliente {
  id        String   @db.VarChar(36) @id @default(uuid())
  nome      String   @db.VarChar(60)
  email     String   @db.VarChar(40)
  senha     String   @db.VarChar(60)
  cidade    String   @db.VarChar(30)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pedidos   Pedido[]
  @@map("clientes")
}

model Funcionario {
  id        String   @db.VarChar(36) @id @default(uuid())
  nome      String   @db.VarChar(60)
  email     String   @db.VarChar(40)
  senha     String   @db.VarChar(60)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pedidos   Pedido[]
  @@map("funcionarios")
}

model Pedido {
  id            Int          @id @default(autoincrement())
  cliente       Cliente      @relation(fields: [clienteId], references: [id])
  clienteId     String       @db.VarChar(36)
  bolo          Bolo         @relation(fields: [boloId], references: [id])
  boloId        Int
  quantidade    Int
  observacao    String?      @db.VarChar(255)
  dataEntrega   DateTime
  status        StatusPedido @default(PENDENTE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  funcionarioId String?      @db.VarChar(36)
  admin         Admin?       @relation(fields: [adminId], references: [id])
  adminId       String?      @db.VarChar(36)
  @@map("pedidos")
}

model Admin {
  id        String   @db.VarChar(36) @id @default(uuid())
  nome      String   @db.VarChar(60)
  email     String   @db.VarChar(40)
  senha     String   @db.VarChar(60)
  nivel     Int      @db.SmallInt @default(2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bolos     Bolo[]
  pedidos   Pedido[]
  logs      Log[]
  @@map("admins")
}

model Log {
  id          Int      @id @default(autoincrement())
  admin       Admin    @relation(fields: [adminId], references: [id])
  adminId     String   @db.VarChar(36)
  descricao   String   @db.VarChar(60)
  complemento String   @db.VarChar(200)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("logs")
}

enum StatusPedido {
  PENDENTE
  EM_PRODUCAO
  CONCLUIDO
  ENTREGUE
  CANCELADO
}